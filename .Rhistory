knit_with_parameters('~/datascience1/p8105_hw1_lec2197/preview.Rmd')
unlink('preview_cache', recursive = TRUE)
?runif
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
?as.character
character("wow")
character(length = 10, "wow")
character(length = 10)
?factor
fact_vector <- factor(rand_sample)
fact_vector
rand_sample
fact_vector <- factor(log_vector)
fact_vector <- factor(char_vector)
char_vector <- character(length = 10)
fact_vector <- factor(char_vector)
fact_vector <- factor(log_vector)
fact_vector <- factor(10)
?tibble
library(here)
library(tidyverse)
?tibble
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
char_vector <- character(length = 10)
fact_vector <- factor(log_vector)
tibble(rand_sample, log_vector, char_vector, fact_vector)
all_data <- tibble(rand_sample, log_vector, char_vector, fact_vector)
mean(rand_sample)
mean(log_vector)
mean(char_vector)
mean(fact_vector)
as.numeric(fact_vector)
library(here)
library(tidyverse)
all_data <- tibble(
rand_sample <- runif(10, min = 0, max = 5),
log_vector <- rand_sample > 2,
char_vector <- character(length = 10),
fact_vector <- factor(log_vector)
)
all_data <- tibble(
(rand_sample <- runif(10, min = 0, max = 5)),
(log_vector <- rand_sample > 2),
(char_vector <- character(length = 10)),
(fact_vector <- factor(log_vector))
)
all_data <- tibble(
rand_sample <- runif(10, min = 0, max = 5),
char_vector <- character(length = 10),
fact_vector <- factor(log_vector)
)
all_data <- tibble(
rand_sample <- runif(10, min = 0, max = 5),
char_vector <- character(length = 10),
)
set.seed(1)
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
char_vector <- character(length = 10)
fact_vector <- factor(log_vector)
all_data <- tibble(rand_sample, log_vector, char_vector, fact_vector)
mean(rand_sample)
mean(log_vector)
mean(char_vector)
mean(fact_vector)
data_converted <- select(all_data, as.numeric(log_vector), as.numeric(char_vector), as.numeric(fact_vector))
?select
data_converted <- select(all_data, log_vector, char_vector, fact_vector)
data_converted <- select(all_data, as.numeric(log_vector), char_vector, fact_vector)
char_to_num <- as.numeric(as.factor(char_vector))
char_to_num <- as.numeric(as.factor(char_vector))
fact_to_num <- as.numeric(as.character(fact_vector))
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
char_to_num <- as.numeric(as.factor(char_vector))
fact_to_num <- as.numeric(as.character(fact_vector))
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
char_to_num_2 <- as.numeric(as.factor(char_vector))
fact_to_num_2 <- as.numeric(as.character(fact_vector))
char_to_num_2 <- as.numeric(as.factor(char_vector))
fact_to_num_2 <- as.numeric(as.character(fact_vector))
factor(0,1,1)
factor(1,2,2,2,1,2,1,2)
?factor
factor(c(1,2,3))
factor(c(1,2,2))
set.seed(1)
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
char_vector <- character(length = 10)
fact_vector <- factor(c(1,2,3,4,2,3,2,1,4,3))
all_data <- tibble(rand_sample, log_vector, char_vector, fact_vector)
mean(rand_sample)
mean(log_vector)
mean(char_vector)
mean(fact_vector)
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
char_to_num_2 <- as.numeric(as.factor(char_vector))
fact_to_num_2 <- as.numeric(as.character(fact_vector))
set.seed(1)
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
char_vector <- character(length = 10)
fact_vector <- factor(c("l","a","u","r","a","c","o","s","g","r"))
mean(rand_sample)
mean(log_vector)
mean(char_vector)
mean(fact_vector)
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
char_to_num_2 <- as.numeric(as.factor(char_vector))
fact_to_num_2 <- as.numeric(as.character(fact_vector))
as.numeric(c("a", "b", "c"))
# Chunk 1: adding libraries
library(here)
library(tidyverse)
# Chunk 2: create vectors
set.seed(1)
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
char_vector <- character(length = 10)
fact_vector <- factor(c("l","a","u","r","a","c","o","s","g","r"))
# Chunk 3: bind in tibble
all_data <- tibble(rand_sample, log_vector, char_vector, fact_vector)
# Chunk 4: take mean
mean(rand_sample)
mean(log_vector)
mean(char_vector)
mean(fact_vector)
# Chunk 5: conversion
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
# Chunk 6: conversion take 2
char_to_num_2 <- as.numeric(as.factor(char_vector))
fact_to_num_2 <- as.numeric(as.character(fact_vector))
?countif
countif
length(ifsum)
x <- rnorm(1000)
y <- rnorm(1000)
ifsum <- (x + y) > 0
num_ifsum <- as.numeric(ifsum)
fact_ifsum <- as.factor(num_ifsum)
two_data <- tibble(x, y, ifsum, num_ifsum, fact_ifsum)
length(ifsum)
length(which(ifsum))
length(which(ifsum))/length(ifsum)
dim(two_data)
length(two_data)
mean(two_data$x)
median(two_data$x)
0.25
x<-c(0.01,0.08, 0.27, 0.64)
barplot(x, col="blue", main="Probability Distribution", xlab="Number of patients with low LDL", ylab="Probability", names.arg=c(0,1,2,3),ylim=c(0,1))
?ggplot
ggplot(two_data, aes(x,y))
ggplot(two_data, aes(x,y, color = ifsum))
ggplot(two_data, aes(x,y, color = ifsum)) + geom_point()
ggplot(two_data, aes(x,y, color = ifsum)) + geom_point(size = 1)
ggplot(two_data, aes(x,y, color = ifsum)) + geom_point(size = 0.5)
?ggsave
ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
ggsave(scatterplot)
ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
ggsave()
ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
ggsave(scatterplot.jpg)
ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
plot_logical <- ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
?ggsave
plot_logical <- ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
plot_numeric <- ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
plot_factor <- ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
plot_logical <- ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
plot_numeric <- ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
plot_factor <- ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
ggsave("plot_logical.png", plot = plot_logical)
