---
title: "p8105_hw1_lec2197"
author: "Laura Cosgrove"
date: "9/15/2018"
output: github_document
---

Before starting anything, I'm going to load packages `here` and `tidyverse`. I'm loading `here` in case I need to work with any data: it helps find source files without being super picky about where they are. Jenny Bryan recommended it in one of the readings. I'm loading `tidyverse` because I suspect I may need to use it to create plots.

```{r adding libraries}
library(here)
library(tidyverse)
```

## Problem 1

My goal is to create a data frame comprised of some specified vectors.

First, I created the following vectors:

* A random sample of size 10 from a uniform[0, 5] distribution
* A logical vector indicating whether elements of the sample are greater than 2
* A (length-10) character vector
* A (length-10) factor vector

```{r create vectors, results="hide"}
set.seed(1)
rand_sample <- runif(10, min = 0, max = 5)
log_vector <- rand_sample > 2
char_vector <- character(length = 10)
fact_vector <- factor(c("l","a","u","r","a","c","o","s","g","r"))
```

I had to create the vectors first before binding them in a dataframe, because the logical vector's creation depends on the existence of the random sample vector. Now, I'm going to bind them in a dataframe.

```{r bind in tibble}
one_data <- tibble(rand_sample, log_vector, char_vector, fact_vector)
```

Taking the mean will only work for some vectors. This is because the mean function requires numeric inputs or logical inputs. (For logical inputs, the function interprets as binary: i.e., `FALSE` is coded as `0` and `TRUE` is coded as `1`.)

```{r take mean}
mean(rand_sample)
mean(log_vector)
mean(char_vector)
mean(fact_vector)
```

Both factor and logical vectors convert to numeric vectors without R having to coerce NAs. Factor vectors convert in terms of their levels, which are converted to the integer series starting from 1. Elements with the same level will code as the same number, but it's not an ordered conversion in terms of the first element's level being assigned `1`, and so on. Rather, it depends on the underlying data. For my example, the factors are ordered in alphabetical order. Logical vectors convert in the same way as above, i.e., the conversion functions interprets as binary where `FALSE` is coded as `0` and `TRUE` is coded as `1`.

```{r conversion, results="hide"}
fact_to_num <- as.numeric(fact_vector)
char_to_num <- as.numeric(char_vector)
log_to_num <- as.numeric(log_vector)
```

Character vectors, on the other hand, do not convert to logical vectors without coercion of NAs. However, we can test this one more time with a different character vector than my default creation of empty characters using the `character(length = 10)` function, by first converting my factor vector to character and then to numeric. We can also test if converting the factor vector to character first, and after to numeric, will be successful.

```{r conversion take 2, results="hide"}
char_to_num_2 <- as.numeric(as.factor(char_vector))
fact_to_num_2 <- as.numeric(as.character(fact_vector))
```

As expected, the second character vector conversion to numeric by way of a factor conversion succeeded, while a factor vector conversion to numeric by way of a character conversion failed. Our different elements did not make a difference.

## Problem 2

This problem focuses on plotting and the use of inline R code.

Create a data frame comprised of:
x: a random sample of size 1000 from a standard Normal distribution
y: a random sample of size 1000 from a standard Normal distribution
A logical vector indicating whether the x + y > 0
A numeric vector created by coercing the above logical vector
A factor vector created by coercing the above logical vector

```{r create dataframe}
x <- rnorm(1000)
y <- rnorm(1000)
ifsum <- (x + y) > 0
num_ifsum <- as.numeric(ifsum)
fact_ifsum <- as.factor(num_ifsum)
two_data <- tibble(x, y, ifsum, num_ifsum, fact_ifsum)
```

The dimensions, or size, of `two_data` is `r dim(two_data)`, meaning that the dataframe is comprised of 5 vectors of length 1000. The mean of x is `r mean(two_data$x)`, the median of x is `r median(two_data$x)`, and the proportion of cases for which the logical vector is `TRUE` is `r length(which(ifsum))/length(ifsum)`.

Now we can visualize the data using scatterplots. Three identical-looking plots can be made of the x vs. y data with color coding on the statement `x + y > 0` since we created a logical vector evaluating that expression, and from that logical vector numeric and factor vectors. However, ggplot will have different legend defaults when asked to mapp color on different types of variables. For logical vectors, the legend options are binary, `TRUE` and `FALSE`; factor vectors, similarly, have a binary legand with `0` and `1` as options. Numeric vectors, however, are assumed to be continuous, and so have a continuous gradient scale, even though our data only have `0` and `1` as options. 

```{r create scatterplots}
plot_logical <- ggplot(two_data, aes(x, y, color = ifsum)) + geom_point(size = 0.5)
plot_numeric <- ggplot(two_data, aes(x, y, color = num_ifsum)) + geom_point(size = 0.5)
plot_factor <- ggplot(two_data, aes(x, y, color = fact_ifsum)) + geom_point(size = 0.5)
```

```{r save first scatterplot}
ggsave("plot_logical.png", plot = plot_logical)
```

